

1. On GloboTicket.Integration.Messages project,
   - On IntegrationBaseMessage.cs file, add new class called SecurityContext with the following code:

        public class SecurityContext
        {
            public string AccessToken { get; set; }
        }

   - Inside IntegrationBaseMessage class add new property with the following code:

        public SecurityContext SecurityContext { get; set; } = new SecurityContext();

2. On GloboTicket.Services.ShoppingBasket project,

   - On BasketsController.cs file, inside the CheckoutBasketAsync() method before sending message to service bus
     add the following code:

                basketCheckoutMessage.SecurityContext.AccessToken = accessTokenForOrderingService;


3. On GloboTicket.Services.Ordering project,
   - Add NuGet package IdentityModel
   - Add new folder called "Helpers"
   - Add new class called "TokenValidationService" and copy/paste the following code:

using IdentityModel;
using IdentityModel.Client;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Net.Http;
using System.Security.Cryptography;
using System.Threading.Tasks;

namespace GloboTicket.Services.Ordering.Helpers
{
    public class TokenValidationService
    {
        private readonly IHttpClientFactory _httpClientFactory;

        public TokenValidationService(IHttpClientFactory httpClientFactory)
        {
            _httpClientFactory = httpClientFactory;
        }

        public async Task<bool> ValidateTokenAsync(string tokenToValidate)
        {
            var client = _httpClientFactory.CreateClient();

            var discoveryDocumentResponse = await client
                .GetDiscoveryDocumentAsync("https://localhost:5010");
            if (discoveryDocumentResponse.IsError)
            {
                throw new Exception(discoveryDocumentResponse.Error);
            }

            try
            {

                var issuerSigningKeys = new List<SecurityKey>();
                foreach (var webKey in discoveryDocumentResponse.KeySet.Keys)
                {
                    var e = Base64Url.Decode(webKey.E);
                    var n = Base64Url.Decode(webKey.N);

                    var key = new RsaSecurityKey(new RSAParameters
                    { Exponent = e, Modulus = n })
                    {
                        KeyId = webKey.Kid
                    };

                    issuerSigningKeys.Add(key);
                }

                var tokenValidationParameters = new TokenValidationParameters()
                {
                    ValidAudience = "ordering",
                    ValidIssuer = "https://localhost:5010",
                    IssuerSigningKeys = issuerSigningKeys
                };

                _ = new JwtSecurityTokenHandler().ValidateToken(tokenToValidate,
                    tokenValidationParameters, out var rawValidatedToken);

                return true;
            }
            catch (SecurityTokenValidationException)
            {
                // Validation failed - log this if needed
                return false;
            }
            catch (Exception)
            {
                return false;
            }
        }
    }
}

   - On Startup.cs file, add the folowing code inside ConfigureServices() method:

            services.AddHttpClient();
            services.AddScoped<TokenValidationService>();

   - On AzServiceBusConsumer.cs file, add a new private readonly field using the followng code:
        private readonly IServiceScopeFactory _scopeFactory;

   - On AzServiceBusConsumer.cs file, change the constructor with the followng code:

        public AzServiceBusConsumer(IConfiguration configuration, 
            IMessageBus messageBus, 
            OrderRepository orderRepository,
            IServiceScopeFactory scopeFactory)
        {
            _configuration = configuration;
            _orderRepository = orderRepository;
            _scopeFactory = scopeFactory;
            // _logger = logger;
            _messageBus = messageBus;

            var serviceBusConnectionString = _configuration.GetValue<string>("ServiceBusConnectionString");
            checkoutMessageTopic = _configuration.GetValue<string>("CheckoutMessageTopic");

            _serviceBusProcessor = serviceBusClient.CreateProcessor(checkoutMessageTopic, subscriptionName);
        }


   - On AzServiceBusConsumer.cs file, inside MessageHandler() method right after the following code:

            // Save order with status "not paid"
            BasketCheckoutMessage basketCheckoutMessage = JsonConvert.DeserializeObject<BasketCheckoutMessage>(body);

     Add the following code:

            using (var scope = _scopeFactory.CreateScope())
            {
                var tokenValidationService = scope.ServiceProvider
                    .GetRequiredService<TokenValidationService>();

                if (!await tokenValidationService.ValidateTokenAsync(
                        basketCheckoutMessage.SecurityContext.AccessToken))
                {
                    // log, cleanup, ... but don't throw an exception as that will result
                    // in the message not being regarded as handled.  
                    return;
                }
            }

4. Put breakpoint on ValidateTokenAsync() method and the following line of code:
        var orderId = Guid.NewGuid();
        on MessageHandler() method of AzServiceBusConsumer.cs file

5. Debug the app, do login add ticket and checkout see if it hits ValidateTokenAsync() method 
   as well as the second breakpoint

6. Debug using invalid/failed token scenario by changing the audience on TokenValidationService.cs file 
   using something else