


1. On GloboTicket.Gateway project,
   - Add NuGet package IdentityModel.AspNetCore v 2.0.0
   - On Startup.cs file, inside ConfigureServices() method add the following code:

            services.AddAccessTokenManagement();

   - Replace TokenExchangeDelegatingHandler.cs file, with the following code:

        public class TokenExchangeDelegatingHandler : DelegatingHandler
        {
            private readonly IHttpClientFactory _httpClientFactory;
            private readonly IClientAccessTokenCache _clientAccessTokenCache;


            public TokenExchangeDelegatingHandler(IHttpClientFactory httpClientFactory,
                IClientAccessTokenCache clientAccessTokenCache)
            {
                _clientAccessTokenCache = clientAccessTokenCache;
                _httpClientFactory = httpClientFactory;
            }

            public async Task<string> GetAccessToken(string incomingToken)
            {
                var item = await _clientAccessTokenCache
                    .GetAsync("gatewaytodownstreamtokenexchangeclient_eventcatalog");
                if (item != null)
                {
                    return item.AccessToken;
                }

                var (accessToken, expiresIn) = await ExchangeToken(incomingToken);

                await _clientAccessTokenCache.SetAsync(
                    "gatewaytodownstreamtokenexchangeclient_eventcatalog",
                    accessToken,
                    expiresIn);

                return accessToken;
            }


            protected override async Task<HttpResponseMessage> SendAsync(
                HttpRequestMessage request, CancellationToken cancellationToken)
            {
                // extract the current token
                var incomingToken = request.Headers.Authorization.Parameter;

                // set the bearer token
                request.Headers.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue(
                        "Bearer",
                        await GetAccessToken(incomingToken));


                //// exchange it
                //var newToken = await ExchangeToken(incomingToken);

                //// replace the incoming bearer token with our new one
                //request.Headers.Authorization = 
                //    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", newToken);

                return await base.SendAsync(request, cancellationToken);
            }

            private async Task<(string, int)> ExchangeToken(string incomingToken)
            {
                var client = _httpClientFactory.CreateClient();

                var discoveryDocumentResponse = await client
                    .GetDiscoveryDocumentAsync("https://localhost:5010/");
                if (discoveryDocumentResponse.IsError)
                {
                    throw new Exception(discoveryDocumentResponse.Error);
                }

                var customParams = new Dictionary<string, string>
                {
                    { "subject_token_type", "urn:ietf:params:oauth:token-type:access_token"},
                    { "subject_token", incomingToken},
                    { "scope", "openid profile eventcatalog.fullaccess" }
                };

                var tokenResponse = await client.RequestTokenAsync(new TokenRequest()
                {
                    Address = discoveryDocumentResponse.TokenEndpoint,
                    GrantType = "urn:ietf:params:oauth:grant-type:token-exchange",
                    Parameters = customParams,
                    ClientId = "gatewaytodownstreamtokenexchangeclient",
                    ClientSecret = "0cdea0bc-779e-4368-b46b-09956f70712c"
                });

                if (tokenResponse.IsError)
                {
                    throw new Exception(tokenResponse.Error);
                }

                return (tokenResponse.AccessToken, tokenResponse.ExpiresIn);

            }
        }

   - Put breakpoint on GetAccessToken() method and debug the app to see if it takes 
     token from cache by login and refreshing the page


     